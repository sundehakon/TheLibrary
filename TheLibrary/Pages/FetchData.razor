@page "/fetchdata"
@using System;
@using System.ComponentModel.DataAnnotations;
@using Microsoft.AspNetCore.Components.Forms;
@inject SharedDataService SharedDataService;
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@inject BasketService BasketService

<h1>Your basket</h1>
<div class="basket-main">
@if (BasketService.Books.Count == 0)
{
    <p>Your basket is empty.</p>
}
else 
{
    <ul class="basket-list">
        @foreach (var book in BasketService.Books)
        {
            <li>@book.Title by @book.Author</li>
        }
    </ul>
}

    <div class="clearbasket-button">
        <button @onclick="ClearTheBasketButton">
            <span class="oi oi-trash"></span>
        </button>
    </div>
</div>

<div class="login-container-container">
    <div class="login-container">
        <h1 class="login-header">Enter your details</h1>

        <EditForm Model="userInput">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="form-group">
                <label for="userInput.Name">Name</label>
                <InputText id="name" @bind-Value="userInput.Name" />
            </div>

            <div class="form-group">
                <label for="userInput.Password">Password</label>
                <InputText id="password" @bind-Value="userInput.Password" type="password" />
            </div>

            <div class="form-group">
                <label for="userInput.PhoneNumber">Phone Number</label>
                <InputText id="phone" @bind-Value="userInput.PhoneNumber" />
            </div>

            <div class="login-button">
                <button type="submit" @onclick="HandleClick">Confirm loan</button>
            </div>
        </EditForm>
    </div>
</div>

@code {
    bool password = false;

    public class UserInput
    {
        [Required(ErrorMessage = "A name is required")]
        public string Name { get; set; }

        [Required(ErrorMessage = "Password is required")]
        public string Password { get; set; }

        [Required(ErrorMessage = "Please enter a valid phone number")]
        public string PhoneNumber { get; set; }

        public List<Book> LoanedBooks { get; set; }
    }

    private UserInput userInput = new UserInput();

    private async Task HandleClick()
    {
        userInput.LoanedBooks = BasketService.Books;
        await HandleValidSubmit();
        await JSRuntime.InvokeVoidAsync("showAlert", "You have successfully loaned your books! Check your SMS for more information regarding loan expiration, etc.");
        SharedDataService.password = true;
        SharedDataService.Name = userInput.Name;

        await Task.Delay(100).ContinueWith(_ => Navigation.NavigateTo("/", forceLoad: true));
    }

    private async Task HandleValidSubmit()
    {
        try
        {
            var json = System.Text.Json.JsonSerializer.Serialize(userInput);
            await System.IO.File.WriteAllTextAsync(".gitignore/users.json", json);
            BasketService.Books.Clear();
            Console.WriteLine("HandleValidSubmit successful");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error in HandleValidSubmit: {ex.Message}");
        }
    }

    private void NavigateToIndex()
    {
        Navigation.NavigateTo("/");
    }

    private void ClearTheBasketButton()
    {
        BasketService.Books.Clear();
    }
}
